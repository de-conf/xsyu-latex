本科毕业设计（论文）

题

目：

基于 Arduino 分布式温控系统
设计与实现

院 （系）：

计算机学院

专业班级：

网络 1701

学生姓名：

陈佳庚

指导教师：

郑宏涛

评阅人：
完成时间：

2021 年 6 月

摘 要

基于 Arduino 分布式温控系统设计与实现
摘 要

随着物联网的快速发展，进入了万物互联的时代，越来越多的设备可以进行联网控
制，通过网络进行数据收集以及对设备的远程控制。当下大量电子设备的使用，由于电
子设备本身的温度的敏感性，对于环境温度的监控和控制也尤为重要。
随着越来越多的机房和交换机，路由器，服务器的部署，其中的温度监控和控制也
越来越重要。有资料表明1 ：环境温度每提高10 °C，元器件寿命约降低 30%-50%，影响
小的也基本都在 10% 以上，设备更持久的运行的需求，对于机房的温度就需要得到进
一步的控制，这样才能增长使用的寿命。相对于传统的人员运维和监控，浪费大量的人
力和财力资源，因此，迫切需要自动化可远程监控的管理平台，来把巡检和温度操控这
种重复性劳动改革为自动化处理和智能化控制。
根据基于 Arduino 分布式温控系统设计与实现的需求，首先将功能抽象化，确定了
采用 C/S 的结构模式。客户端采用 Arduino 开发板和传感器用来采集数据和控制红外发
射温度控制信号，服务端采用 LNMP (Linux+Nginx+Mysql+Python) 进行远程信息的收集
和监控以及警报。其中，采用了 Linux 为操作系统，Nginx 为 Web Server，Mysql 对采集
信息进行数据存储，Python 的 flask 框架作为 Web 应用程序框架共同构成了服务端的温
度监控报警系统。客户端与服务端之间由 MQTT 协议负责数据通信。
通过对于该系统的实际应用，由 Arduino 自动控制空调温度，平台监控温湿度、烟
雾信息，既可保证机房内温度的均衡和稳定，又起到了节能减排的效果。并且增加了烟
雾报警系统，对于火灾烟雾有了警报，方便运维人员更快速的处理突发情况，在温度控
制方面减少了人工干预和处理，极大的解放了人力成本。
关键词：控制系统；分布式温度控制系统；Web 开发；Arduino；Python

1

热力学中最重要的公式——阿累尼乌斯方程，它是用来描述化学物质反应速率随温度变化关系的经验公式。阿累
尼乌斯（Arrhenius）方程 k = Ae−Ea /RT 可以用来计算电容寿命，电容工作每下降 10 度，其寿命增加一倍，反过来
也就是电容温度升高 10 度，电容寿命减小一倍

ABSTRACT

Design and Implementation of Distributed Temperature Control
System based on Arduino
ABSTRACT

With the rapid development of the Internet of Things and entering the era of the Internet of
Everything, more and more devices can be controlled by the Internet, data collection and remote
control of devices through the network. At present, the use of a large number of electronic
devices is particularly important for monitoring and controlling the ambient temperature due to
the temperature sensitivity of the electronic devices themselves.
Some data show that: every time the ambient temperature increases by 10 °C, the life
of the components is reduced by 30%-50%, and the impact is basically more than 10%. The
equipment needs more durable operation, and the temperature of the computer room needs to
be further improved. Control, so as to increase the life span of use. Compared with traditional
personnel operation and maintenance and monitoring, a lot of human and financial resources
are wasted. Therefore, there is an urgent need for an automated management platform that can
be remotely monitored to reform the repetitive labor of inspection and temperature alignment
into automated processing.
According to the requirements of the design and implementation of the Arduino-based
distributed temperature control system, the function is abstracted first, and the C/S structure
mode is determined to be adopted. The client uses Arduino development boards and sensors
to collect data and control infrared emission temperature control signals, and the server uses
LNMP (Linux + Nginx + Mysql + Python) for remote information collection and monitoring
and alarms. The web application framework together constitutes the temperature monitoring
and alarm system on the server side. The MQTT protocol is responsible for data communication
between the client and the server.
Through the actual application of the system, the Arduino automatically controls the temperature of the air conditioner, and the platform monitors the temperature, humidity, and smoke
information, which can not only ensure the balance and stability of the internal temperature of
the computer room, but also save energy. In addition, a smoke alarm system has been added to
provide an alarm for fires, which facilitates faster handling by operation and maintenance personnel, reduces manual intervention and processing in terms of temperature control, and greatly
liberates labor costs.
Keywords: Control system; Distributed temperature control system; Web development; Arduino; Python

目 录

目 录
1

2

绪论 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1

1.1

研究背景 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1

1.2

国内外研究现状 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1

1.3

研究需求与意义 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2

1.4

主要工作和设计 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

3

1.5

本章小结 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

3

系统分析与设计 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

4

可行性分析 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

4

2.1.1

经济可行性 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

4

2.1.2

技术可行性 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

4

2.1.3

操作可行性 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

5

2.1.4

法律可行性 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

5

2.2

系统需求分析 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

5

2.3

系统整体设计 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

6

2.3.1

系统硬件设计 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

6

2.3.2

系统架构流程设计 . . . . . . . . . . . . . . . . . . . . . . . . . . .

9

数据库设计 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

9

开发技术选择 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

14

3.1

物联网通讯协议 MQTT . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

14

3.2

关系性数据库 MySQL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

14

3.3

Python 开发语言 Flask 模块 . . . . . . . . . . . . . . . . . . . . . . . . . . .

16

3.4

SQLAlchemy—对象关系映射器 (ORM) . . . . . . . . . . . . . . . . . . . .

16

3.5

RESTful 架构开发方式 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

17

系统开发与实现 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

20

4.1

结构化开发方式 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

20

4.2

红外编码 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

21

4.3

对开源项目的有效利用 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

24

系统开发成果 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

27

5.1

预期目标 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

27

5.2

分布式节点管理控制系统 . . . . . . . . . . . . . . . . . . . . . . . . . . . .

27

5.2.1

用户模块 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

27

5.2.2

信息展示模块 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

28

2.1

2.4
3

4

5

— I —

西安石油大学大学本科毕业设计（论文）

5.3
5.4

5.2.3 节点管理模块 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
Arduino 客户端 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
遇到的问题和解决办法 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

系统测试 . . .
6.1 测试目标
6.2 测试方案
6.3 强度测试

.
.
.
.

32
32
32
32

结论与总结 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

33

参考文献 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

34

致谢 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

35

6

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

— II —

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

.
.
.
.

29
30
31

绪论

1
1.1

绪论

研究背景

随着互联网的高速发展，为了提供更好的互联网服务，网络基础设备的也在不断增
加，这其中就有大量的路由器，交换机，服务器等设备需要一个良好的工作环境温度，
来保证设备的稳定运行。当前，传统方式维护各设备的环境依旧采用人力方式，造成大
量的人力浪费和重复性劳动，因此迫切需要将已有的工作自动化、智能化。
目前，温度控制类型的产品在行业内一般设计为在机器上操作，无法远程控制，不
能很好满足精确控制，节能的要求。本系统既可以远程控制温度，又可以实时监控温度，
火焰，烟雾，并对火灾等突发情况做出预警，可以很好满足运维人员维护监控的需求来
维持通信机房稳定运行。我校（西安石油大学）的各设备间的温度控制依旧采用人力进
行控制，且无法及时获取温度，湿度，烟雾等关键环境信息，带来了一定的空调电力浪
费和安全的隐患。针对以上的通信机房运维巡检工作，使用新兴的物联网技术，设计并
实现了通信机房温度监控和智能化控制，解决了传统运维管理方式的效率地下，工作繁
琐，无法实时介入处理的问题。还有很多生活中的场景可以用本系统来完成，因此本系
统前景广阔，很有研究的意义。
基于 Arduino 的机房分布式温度控制系统是一个用于多机房的温度监控调节系统，
由笔者独立开发，现在已经投入使用，承担了机房温度监控和控制的任务，到目前为止，
该系统运行良好。

1.2

国内外研究现状

由于本课题涉及了多个方面，所以需要从多个方面去调查研究目前国外的使用情况
和应用方式。这其中又主要包含三个方面：分别为对数据中心的温度的控制、Arduino
开发板的应用现状、物联网云平台的应用。
对于数据中心方面的温度控制情况如下:
在使用 IDC 机房的过程中出现急需解决的问题, 最为明显的是机房巨大的耗电量及
室内温度严重超标的问题。更甚者在一些地方的 IDC 机房出现了因空调制冷量不足, 机
房温度过高威胁机房设备运行安全等问题, 况且 IDC 业务同样具有高能耗的特征。因此
若想建立成功的 IDC 机房则需要解决好机房空调系统的合理运行, 这一过程已成为现如
[1]
今 IDC 机房建设以及使用过程中不可避免的环节 。
目前国内对于机房温度控制方面，在数据中心采用的是常规冷水空调系统、单冷源
+ 板式换热器空调系统和双冷源 + 板式换热器空调系统，这种情况要保持空调常年开机
运行。这种情况只适合大型机房，机器集中放置，制冷与散热要求异常严格的企业机房。
并不适用于分布式放置设备和要求节能减排的学校，因此，其温度控制方面对于本课题
无太大参考价值。
Arduino 开发板的应用现状：
Arduino 是一个开发各类设备，
让你能充分感知和控制物理世界的生态系统。Arduino
— 1 —

西安石油大学大学本科毕业设计（论文）

是一个基于一系列单片机电路板的开源物理计算平台。目前国内外。由于 Arduino 的开
放性和便捷性，针对 Arduino 的使用非常流行。例如在 GitHub2 以及 arduino.cc3 网站上有
大量的应用示例。但是其基本都是针对 Arduino 为核心，进行软硬件扩展，只适用于单
系统，无法针对数据进行收集和汇总，无法满足分布式系统的监控、控制等要求。
物联网云平台的应用现状：
对于进行数据收集和处理的国内物联网云平台，较为规范、开放的云平台，国内主
要有 OneNET4 、贝壳物联5 。前者只适用于多设备接入，界面复杂，并未对特定场景有
优化。后者较为符合要求，但是超过一定连接设备需要付费。都不能很好满足校园机房
分布式温度监控的要求。
总的来说：
温度控制器属于信息技术的前沿尖端产品，尤其是温度控制器被广泛用于工农业生
产、科学研究和生活等领域，数量日渐上升。温度控制器是一种温度控制装置，它根据
用户所需温度与设定温度之差值来控制加热器运作，从而达到改变用户所需温度的目
的。近百年来，温度控制器的发展大致经历了以下阶段：(1) 模拟、集成机械式温度控
制器；
（2）电子式智能温度控制器。目前，国内外上新型温度控制器正从模拟式向数字
式、电子式由集成化向智能化、网络化的方向发展。现今基于单片机的温度控制系统在
生产、安全保护以及节约能源等方面发挥了着重要作用。近年来，国内基于单片机的温
度控制系统在技术上得到迅速发展，性能不断完善，功能不断增强，适用范围也不断扩
大，市场占有率逐年增长，进入 21 世纪后，智能的温控系统正朝着高精度、多功能、总
线标准化、高可靠性及安全性、开发虚拟温控器和网络温控器、研制单片机测温控温系
统等高科技的方向迅速发展。

1.3

研究需求与意义

为了保证通信机房设备的良好运行，温度的监控和控制十分必要。例如，对于通信
机房中的交换机，如果温度偏高，就会导致机器散热堆积，使得集成电路和二极管等元
器件形成结晶，热堆积严重时甚至会烧毁设备，相对的，温度过低时，会导致绝缘材料
变脆，以及冷凝结露。这种情况下导致设备短路，也会对设备的寿命和可靠性造成影响。
基于对以上需求的分析，为了保证对于通信机房的温度控制和监控，基于 Arduino
的分布式温度控制系统有着明显的现实需求和意义。
本项目通过物联网技术进行数据共享和更新，具有分布式便于扩展，方便部署的特
点，解决了线下运维巡检方面的重复性工作，保证了对于机房的温度精细控制。提供烟
雾自动报警，无论从自动化，环保，安全角度考虑。这套系统对于机房管理人员都将提
供更便捷，智能的工作方式。

2

GitHub 是一个使用 Git 进行版本控制的基于网络的托管服务，主要用于管理程序员软件代码和项目。

3

Arduino 创作者平台，具有大量的可参考项目。网址:https://create.arduino.cc/projecthub/

4

OneNET 是由中国移动打造的 PaaS 物联网开放平台

5

https://www.bigiot.net/—物联网云平台，通过互联网以对话、遥控器等形式与你的智能设备聊天、发送指令，
查看实时数据，跟实际需求设置报警条件，通过 APP、邮件、短信、微博、微信等方式通知用户。

— 2 —

绪论

1.4

主要工作和设计

本系统是对环境温度进行实时监测和控制，设计开发的分布式温度监测控制系统实
现了基本的温度、湿度、烟雾的监控功能以及火灾报警功能：各个节点的 Arduno 通过
传感器模块，采集到环境信息后, 进行判断：当环境温度低于设定的下限温度时，通过
红外模块，切换空调的模式为自动。当环境温度高于设定的上限时，通过红外模块，启
动空调的制冷模式，并通过 W5100 以太网扩展模块以 MQTT6 协议，发送相关的温度、
湿度、烟雾到指定服务器。服务端采用 Linux 作为服务器，安装 MQTT 服务端接受数
据，采用 Python 的 Flask 模块快速构建 WEB 应用程序，其负责对 MQTT 服务端的数据
解析和数据分析：当烟雾值超过预设值时，自动发送邮件报警到指定邮箱。通过这些共
同构建完成了基于 Arduino 的分布式温度控制系统。
实现的功能如下：
1. 监控点口管理功能。自动发现 Arduino 监控节点功能，提供可视化的个管理与配
置功能。配置监控节点的地址位置、IP 地址阈值设置、管理人员等。
2. 关键指标的统计展示功能。根据监控节点采集的温度、湿度、PM2.5、烟感等信
息，结合监控节点的部署位置、指标阈值等。提供不同维度的信息展示功能。
3. 温度控制功能。根据采集到的的实时，提供通过红外传感器控制空调的温度的功
能。
4. 告警功能设置系统级的告警阈值和单个节点的告警阈值，其中单个节点的阈值
优先级高于系统级别；系统级别的告警接收人和单个节点的告警接收人，单个节点告警
接收与系统级别并存；提供邮件等方式告警。

1.5

本章小结

本章主要论述基于目前国内外对于温度控制，Arduino, 物联网平台的研究，通过对
该方向的深入了解，确立合适的基于 Arduino 的分布式温度控制系统的技术选型以及整
体架构设计。对论文中主要涉及的工作进行立项，确定基于 Arduino 的分布式温度控制
系统的实现的具体功能和模块设计。

6

MQTT 协议是基于发布/订阅模式的物联网通信协议，凭借简单易实现、支持 QoS、报文小等特点，占据了物联
网协议的半壁江山。

— 3 —

西安石油大学大学本科毕业设计（论文）

2
2.1

系统分析与设计

可行性分析

可行性分析是对工程项目进行系统技术经济论证，经济合理性综合分析的方法。其
目的是通过对技术先进程度，经济合理性和条件可能性的分析论证，选择以最小的人
力、物力、财力耗费，取得最佳技术、经济、社会效益的切实方案。它是项目前期分析
[2]
的主要手段 。
对于本次开发的软件项目来说，进行可行性分析是必不可少的步骤。可行性研究是
软件项目的一种科学的方法，在对于本项目前期经过充分的论证分析后，方可制定计划
确保项目实施的进度和控制项目的流程。进而对整个项目进行软件工程的管理。确保项
目的预见性、公正性、可靠性、科学性。
2.1.1

经济可行性

经济可行性主要对本项目进行成本效益分析，从经济角度，确定是否产出大于投入。
（1）成本角度：
硬件方面本项目主要使用 Arduino 开发板 + 各类传感器模块，系统运行在一台 2 核
4G 的 kvm 虚拟机之上。相较于其他方案实现，如树莓派，单片机等硬件成本低廉。
软件方面采用开源免费的 Linux 操作系统和 Mysql 数据库，不会产生额外的授权费
用。
（2）效益方面：
本系统为相关运维巡检工作减少了经费和资源投入，产生大量可观的直接经济效益
和间接经济效益。在提高机房温度智能化监控控制的同时，该系统的可靠与稳定可以保
证机房温度的合理性。
本系统的应用切实有效的提高了人员及设备的时间，节省大量时间和经济上的成
本，又能提高维护人员工作效率，方便运维管理人员清晰明了的管理各个设备。而且程
序的直观表现也能让非专业人员简洁明了地看清各个机房节点的温度、湿度烟雾情况，
可以更高效的对于环境进行有理的掌控，便于运维管理人员提出针对性解决方案，避免
机房火灾无人发现及温度过高或过低损坏机房电子设备等情况的发生。
2.1.2

技术可行性

由于本系统采用 C/S 模式，对于本系统要从客户端和服务端二个方向去考虑。
客户端方面：
针对于现有的各类开源项目分析，采用 Arduino 开发板作为分布式节点的客户端无
疑是最好的选择，基于 Arduino 的开发已经非常成熟。不需要关心单片机底层复杂的指
令交互逻辑，只需要通过编程语言去控制各组件的输入与输出功能即可。并且和其他类
型的单片机相比，有以下优秀的特点:
1. 跨平台—Arduino 编程环境可完美兼容当下几乎全部操作系统，而其他很多单片

— 4 —

系统分析与设计

机的开发环境只在 Windows 有提供。
2. 便宜—Arduino 开发板价格非常低廉。一块开发板成本只需要 30 RMB, 再加装本
项目各类所需的传感器之后，成本不会超过 100 RMB。
3. 软件硬件开源且可扩展—Arduino 以 Atmel 公司的 ATMEGA 8 位系列单片机及
其 SAM3X8E 和 SAMD21 32 位单片机为硬件基础。开发板和模块在遵循“知识共享许
可协议7 ”的前提下发布，所以经验丰富的电路设计人员可以做出属于自己的模块，并
进行相应的扩展和改进。即使是经验相对缺乏的用户也可以做出基本 Uno 开发板，便
于了解其运行的原理并节约成本。
4. 简单明了的编程环境—Arduno 的开发语言是 C 语言，非常简单易懂，并且有着
大量的示例项目可供参考。
服务端方面:
对于服务端的开发，采用 Linux 操作系统，选用了 Python 语言作为主导，Flask 模
块作为应用程序框架，Mysql 作为数据存储，共同构成 Web 监控管理页面，本人选用了
Python 语言进行开发，本人之前并无使用 Pyhon 开发 Web 界面的经历，本次项目对我
来说是一个很大的挑战。
此外，本次系统项目的开发和构建全部在 Linux 操作系统完成。不同于 Windows 的
臃肿。Linux 的哲学: Keep It Simple, Stupid. 简洁是 Linux 遵循的原则。由此可以减少无
用项的干扰。
2.1.3

操作可行性

本系统除了各分布式节点网络需要修改代码，重新烧录上传 Arduino 开发板外，其
他一切操作基本完成可视化操作，步骤简单，功能清晰，兼顾了实用性和可行性，同时
便于运维人员进行系统的管理。
2.1.4

法律可行性

本程序依照 MIT 协议进行发布。被授权人有权利使用、复制、修改、合并、出版发
行、散布、再授权和/或贩售软体及软体的副本，及授予被供应人同等权利。对应的义务
有在软体和软体的所有副本中都必须包含以上版权声明和本许可声明。依照《中华人民
共和国著作法》和《计算机软件保护条例》本系统程序的发布符合中华人民共和国的相
关法律。

2.2

系统需求分析

目前随着互联网的快速发展，高校的信息化建设进程日益深入，其中数字化校园建
设成为其核心内容。纵观全国各高校的数字化校园建设，以建设数字化网络环境、数字
化管理手段和工作环境；实现数字化校园和管理；创建数字化生活空间；实现校园的信
7

知识共享许可协议（英语：Creative Commons license，或 CC 授权) 是一种公共版权授权条款，其允许分发受版权
保护的作品。一个作者可使用创作共用授权授予他人分享、使用，甚至创作衍生作品的权利。创作共用提供给作者灵
活性（例如，他们可以选择允许非商业用途使用他们的作品）
，保护使用或重新分配他人作品的人，所以他们只要遵
守由作者指定的条件，不必担心侵犯版权。

— 5 —

西安石油大学大学本科毕业设计（论文）

息化和现代化等为最终目标。为推动数字化校园建设进程，创建数字化管理工作，开发
出适用于网络机房的温度监测控制系统。通过本系统可以实现智能化、自动化、数字化
处理网络机房的温度环境，
根据任务书确立目标，确定基于 Arduino 的分布式温度温度控制系统的设计采用
C/S 结构模式。C/S 模式是一种普遍应用的网络计算模式。C/S 模式是两层结构，在这种
模式下，网络中的计算机分为两个有机部分：客户机和服务器。服务器只负责各种数据
的处理和维护，为各个客户机应用程序管理数据；在本设计中客户机包含数据的收集，
节点的控制等应用逻辑程序，通过网络使用 MQTT 协议发送、请求和分析从服务器接
收数据。这是一种“瘦客户机 (Thin Client)”、
“胖服务器 (Fat Server)”的网络结构模式。
本系统还提供在线网页查看节点各类信息，以及后台自动处理数据发送邮件报警的
功能。此外，本系统使用了 API 接口，方便做数据的整合，良好的接口设计可以降低系
统各部分的相互依赖，提高组成单元的内聚性，降低组成单元间的耦合程度，从而提高
系统的维护性和扩展性。同时采用了 MQTT 数据协议进行数据交互，使得低功耗，多并
发，在网络环境差的情况下，网络兼容性好等等优点。
本系统也具有良好的可维护性以及可扩展性。Arduino 开发板的使用，可以方便在
客户端增加扩展，以 Flask 为框架，在服务端也可非常容易的做出信息的扩展，采用的
ORM 数据库读写方式也简单易懂, 由于项目涉及方面较为庞大，为了保证他人的共同协
作开发, 以及后期的二次维护和开发，本项目已在 gitee 开源。

系统整体设计

2.3

本设计主要介绍的是基于 Arduino 的分布式温度控制系统的主要功能模块的设计与
分析。本系统软件设计的根本目标以实现功能需求为基础。
客户端采用通用的面向过程式的 C 语言，采用模块化设计，对包括网络通信模块，
数据接受处理模块，温度探测模块，红外接受发射模块等四个模块进行了详细的功能构
建，结构简单，易于编程实现。
服务端采用 Python 的 Flask 框架，具有轻量化和模块化的特点, 另外，在 SQL 交
互方面采用 SQLAlchemy 8 通过 ORM9 完成数据库的读写，更易于更新和维护以及代码
重用，实现了功能的自动完成比如数据的预处理，相比于大量的传统的 SQL 操作语句
ORM 代码量少，语义性好，更容易使人理解。
2.3.1

系统硬件设计

1. Arduino 单片机模块
客户端主要采用图 2-1所示的 Arduino 开发板进行。其硬件规格为下表2-1所示

8

SQLAlchemy 的是 Python 的 SQL 工具包和对象关系映射器，让应用程序开发人员可以使用上 SQL 的强大功能和
灵活性。
9

ORM 就是通过实例对象的语法，完成关系型数据库的操作的技术，是” 对象-关系映射”ORM 把数据库映射成对

象

— 6 —

系统分析与设计

表 2-1: Arduino uno 硬件规格表

名称

规格

微控制器

ATmega328P

工作电压

5V

输入电压 (推荐)

7-12V

输入电压 (极限)

6-20V

数字输入输出引脚

14 个（其中有 6 个引脚可作为 PWM 引脚）

PWM 引脚

6个

模拟输入引脚

6个

输入/输出引脚直流电流

20 毫安

3.3V 引脚电流

50 毫安

Flash Memory(闪存)

32 KB (ATmega328P) 其中由 0.5 KB 用于系统引导（bootloader）

SRAM（静态存储器）

2 KB (ATmega328P)

EEPROM

1 KB (ATmega328P)

内置 LED 引脚

13

时钟频率

16 MHz

图 2-1: Arduino uno 单片机

— 7 —

西安石油大学大学本科毕业设计（论文）

2. Arduino 扩展模块—Ethernet 模块
Ether 扩展板如图2-2主要通过网线负责网络通信和数据传输。W5100 模块是一款多
功能的单片网络接口芯片，内部集成有 10/100 以太网控制器，主要应用于高集成、高稳
定、高性能和低成本的嵌入式系统中。在本次设计中通过 Ethernet 模块，可将传感器数
据发送至服务器，完成远程数据信息监控。

图 2-2: Arduino Ethernet 模块

3. Arduino 传感器模块—DHT11 模块，烟雾 MQ2 模块、红外接收发射模块。
Arduino 传感器模块如图2-3负责监控和控制各个节点的环境信息。
DHT11 传感器是一种温湿度复合传感器，包含标定的数字信号输出。采用专用数
字化模块化采集技术和温湿度传感器技术，保证了产品极高的可靠性和长期卓越的稳定
性。该传感器由电阻式感湿元件和 NTC 温度测量元件组成，并与高性能 8 位单片机相
连。这种传感器具有质量优良、响应速度快、抗干扰性强、性价比极高等优点。
MQ-2 传感器是基于 QM-NG1 探针的气体传感器，QM-NG1 是一种广谱气体传感
器，采用目前国际上工艺最成熟、生产规模最大的SnO2 材料作为敏感基质制成。本产
品的最大特点是对各种易燃气体 (如氢、液化气、一氧化碳、烷烃等) 和有毒气体 (如酒
精、乙醚、汽油、烟雾等) 高度敏感。
红外与 LED 模块化是一种与 Arduino 兼容的红外发射传感器，通过编程发射出 38
KHz 的调制信号，使其能够适应市场上各种红外接收头，使红外接收器模块化的 38 KHz
红外接收传感器能够接收，从而实现红外无线通信。红外线发射器的核心器件是红外线
发射器，广泛应用于红外遥控装置。本模块具有 3 PIN 接口，通过 Arduino 等控制板可
以方便地实现红外遥控、通信功能。红外线发射器是一种二极管，可以发射特定波长的
— 8 —

系统分析与设计

红外光。红外线遥控器利用红外线发射器发出一连串二进制脉冲码信号。在无线传输过
程中，为了避免其它红外信号的干扰，它通常是在特定载波频率上进行调制，然后通过
红外二极管发射头发射出去。

(a) DHT11 温湿度传感器模块

(b) MQ2 烟雾传感器模块

(c) 红外接收发送模块

图 2-3: 传感器模块图

2.3.2

系统架构流程设计

本系统采用了模块化设计。对实际功能进行模块划分，明确了各模块的功能特征，
为以后的开发提供了良好的功能划分。保证输出的一致性，提高设计效率，适用性强，
易于维护，易于协作。按照模块化思想，确立系统的整体架构图如下图2-4所示
用于表达系统的逻辑信息流用于寻找系统需求简单、以理解的图形符号建立手动和
自动系统需求
数据流图是描述输入数据数据流到输出数据流的变换加工，进而对系统进行整体的
功能建模。数据流图用来用于表达系统的逻辑信息流和寻找系统需求，通过简单、以理
解的图形符号表达了系统中的据传从输入到存储间所涉及的过程。数据流中通过对数据
流、加工、文件、源或宿这些数据元素的表示，反映系统必须完成的逻辑功能，确定功
能模型。图2-5图2-6所示的客户端服务端交互图是需求分析阶段的成果。
从图中可以看出客户端系统主要由 Arduino 开发板为中心，通过 Arduino 开发板附
加的各类扩展，完成相应的功能模块。各模块承担信息的收集、发送作用。之后 Arduino
开发板对数据处理后在以 MQTT 协议按照与服务端约定的数据格式进行发送。
服务端由 MQTT 服务器负责接收数据，Flask-MQTT 负责数据读取，此时，为了确
保数据的及时性，对传入数据立即进行判断，看是否超过设定值，选择是否触发相应警
报。之后对对数据附加标注之后存入数据库。之后在由相关的模块从数据库取得各类数
据，在前端页面进行可视化展示。

2.4

数据库设计

数据库设计是根据数据库模型组织数据的过程。设计者确定必须存储什么数据以
及数据元素是如何相互关联的。有了这些信息，我们就可以开始将数据拟合到数据库模
— 9 —

西安石油大学大学本科毕业设计（论文）

图 2-4: 整体架构图

图 2-5: Arduino 端程序流程图

— 10 —

系统分析与设计

图 2-6: 服务端流程图

型中。数据库设计涉及分类数据和确定相互关系。这种关于数据的理论表示被称为本体
论。本体论是数据库设计背后的理论。
在大多数情况下，设计数据库的人是在数据库设计领域具有专业知识的人，而不需
要业务领域的专业知识，例如，教育经验，从医经验等。因此，数据库设计必须与在该领
域具有专业知识的人员合作确定，以确定必须在系统内存储什么样的数据。这是因为具
有必要领域知识的人员经常无法清楚地表达他们对数据库的系统要求是什么，因为他们
不习惯于根据必须存储的离散数据元素进行思考。要存储的数据可以由需求规格确定。
这个过程通常被认为是需求分析的一部分。
一旦数据库设计者确定要存储在数据库中的数据后，他们就必须确定数据间的依赖
关系。例如，在姓名和地址列表中，假设多人可以拥有相同的地址，但一个人不能拥有
多个地址的情况下，地址取决于姓名。当提供姓名时，地址可以唯一确定，然而，反过
来并不成立——当给定一个地址时，名称不能唯一确定，因为多个人可以居住在一个地
址。由于地址是由名称决定的，所以地址被视为取决于名称。
大多数数据库设计文件采用 E-R 图10 或更直观的矢量图片表示。
本次设计的数据库关系模型如下图2-7所示。本次的数据库设计中，采用了 ORM 面
向对象编程和关系型数据库方式进行编程操作数据库，面向对象编程把所有实体看成对
象（object）
，关系型数据库则是采用实体之间的关系（relation）连接数据。很早就有人
10

实体 - 关系模型（简称 ER 模型）描述了特定知识领域中相关的感兴趣事物。基本的 ER 模型由实体类型（对感
兴趣的事物进行分类）组成，并指定可能存在于这些实体类型的实例之间的关系。

— 11 —

西安石油大学大学本科毕业设计（论文）

图 2-7: 数据库关系图

提出，关系也可以用对象表达，这样的话，就能使用面向对象编程，来操作关系型数据
库。简单说，ORM 就是通过实例对象的语法，完成关系型数据库的操作的技术，是” 对
象-关系映射”（Object/Relational Mapping）的缩写。其中映射关系为：
1. 数据库的表（table）对应编程语言中的类（class）
2. 数据库中的记录（record，行数据）对应编程语言中的对象（object）
3. 数据库中的字段（field）对应编程语言中的对象的属性（attribute）
下面以上图2-7中以 User 表的建立来举例：通过 ORM 的使用，与传统数据库操作
比较就可以发现，ORM 使用对象，封装了数据库操作，因此可以不碰 SQL 语言。开发
者只使用面向对象编程，与数据对象直接交互，不用关心底层数据库。
项目代码通常会使用诸如 Git11 、SVN12 等版本控制工具管理起来，其好处众所周知，
一个是代码多版本管理，另一个是多人协作开发。在项目的持续进展中，数据库的模式
(Schema) 通常也经常需要更新，比如增加一个表、增加一个列或者创建一个索引等。当
新版本升级发布时，在部署阶段，我们需要一个工具能够记录数据库变更版本，类似 Git
一样能够随时 checkout 到指定的数据库版本，支持 upgrade 以及 downgrade。我们连接
数据库的 driver 通常称为引擎（engine）
，这些引擎是抽象接口，其驱动的具体实现可以
是 mysql、sqlite 等关系数据库，实际部署时通过配置的 connection 协议区分。因此我们
的工具应该不依赖于某个具体数据库，而应该是一个通用的工具，屏蔽底层数据库的差
别。而支持 SQLAlchemy 数据库 model 变更的工具我们称为数据库版本管理工具，或者
称为 Migrate 工具。所有涉及的数据库模式变更脚本都放到称为 migrate repository 目录
11

Git 是一个版本控制系统，用于跟踪计算机文件中的变化并协调多人之间的这些文件的工作。在后文还会详细介
绍本项目基于 Git 的团队协作工作流。
12

SVN 使用起来有点像是档案仓库的感觉，支持并行读写文件，支持代码的版本化管理，功能包括取出、导入、更
新、分支、改名、还原、合并等。

— 12 —

系统分析与设计

中。目前主流的两大主流 Migrate 工具分别为 SQLAlchemy Migrate 和 Alembic。本次通
过使用 Alembic 引入了可控制数据库版本的特性。
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

op. create_table ('users ',
sa. Column ('id ', sa. Integer () , nullable =False),
sa. Column ('firstname ', sa. String ( length =64) , nullable =True),
sa. Column ('lastname ', sa. String ( length =64) , nullable =True),
sa. Column ('email ', sa. String ( length =120) , nullable =True),
sa. Column ('password ', sa. String ( length =32) , nullable =True),
sa. Column ('password_hash ', sa. String ( length =128) , nullable =True),
sa. Column ('last_seen ', sa. DateTime (), nullable =True),
sa. Column ('created_timestamp ', sa. DateTime (), nullable =True),
sa. Column ('about_me ', sa. String ( length =140) , nullable =True),
sa. Column ('admin ', sa. Boolean () , nullable =True),
sa. Column ('role_id ', sa. Integer () , nullable =True),
sa. ForeignKeyConstraint ([ 'role_id '], ['roles.id'], ),
sa. PrimaryKeyConstraint ('id ')
)

— 13 —

西安石油大学大学本科毕业设计（论文）

3
3.1

开发技术选择

物联网通讯协议 MQTT

在本系统前期的网络数据传输技术选型对比了 TCP/UDP/JSON/MQTT 等传输协议
或方式的优缺点，综合考虑选择了 MQTT（Message Queuing Telemetry Transport，消息
队列遥测传输协议）作为本次客户端节点和服务端节点数据交互的协议。其协议广泛应
用于机器对机器 (M2M)/物联网 (IoT) 的应用层连接协议，使用极其轻量级的发布/订阅
二进制消息模型通信。对于需要较小代码占用空间和或网络带宽非常宝贵的远程连接非
常有用，是专为受限设备（电池功率非常高的移动应用设备）和低带宽、高延迟或不可
靠的环境通信而设计的。不仅为新兴的“机器到机器”(M2M) 或物联网 (IoT) 世界提供
连接，还被用于通过卫星链路与代理通信的传感器、与医疗服务提供者的拨号连接以及
一系列家庭自动化和小型设备场景。
相对与其他协议，MQTT 具有以下特性:
1. 底层基于 TCP/IP (或者 UDP）协议传输，采用发布/订阅模式的二进制消息模式，提
供一对多的消息发布
2. 控制包结构精简，第一个 1 字节固定报头，第二个 2 字节心跳报文，最小化传输开销
和协议交换，有效减少网络流量。
3. 消息 QoS 支持，可靠性传输保证（TCP 协议传输）
4. 使用 Last Will 和 Testament 特性通知有关各方客户端异常中断的机制。
MQTT 协议主要有三大核心角色：发布者（Publisher）、Broker 代理服务器（转发
者）
、订阅者（Subscriber）
。其中消息的发布者和订阅者都是客户端角色，消息代理是服
务器，消息发布者可以同时是订阅者。
MQTT 客户端身兼二职：既可以是发布者角色，又可以是订阅者角色。一个使用
MQTT 协议的应用程序或者设备就是一个 MQTT 客户端，工作时它需要主动去连接到
代理服务器。
MQTT 服务器又称为” 消息代理” 服务器（Broker），可以是一个应用程序或一台设
备，它是位于消息发布者和订阅者之间，具有以下功能：接受来自客户端的网络连接并
建立通信链路, 接收发布者的主题（Topic）并转发给订阅者, 处理来自客户端的订阅和
退订请求, 向订阅的客户转发相应地主题（Topic）。其具体交互流程如下图3-1所示：

3.2

关系性数据库 MySQL

数据库（Database）是按照数据结构来组织、存储和管理数据的仓库。每个数据库
都有一个或多个不同的 API 用于创建，访问，管理，搜索和复制所保存的数据。我们也
可以将数据存储在文件中，但是在文件中读写数据速度相对较慢。所以，现在我们使用
关系型数据库管理系统（RDBMS）来存储和管理大数据量。所谓的关系型数据库，是
建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的
数据。
— 14 —

开发技术选择

图 3-1: MQTT 协议流程图

RDBMS 即关系数据库管理系统 (Relational Database Management System) 的特点：
1. 数据以表格的形式出现
2. 每行为各种记录名称
3. 每列为记录名称所对应的数据域
4. 许多的行和列组成一张表单
5. 若干的表单组成 database
MySQL 是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于
Oracle 公司。MySQL 是一种关联数据库管理系统，关联数据库将数据保存在不同的表
中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。MySQL
具有以下特性：
• MySQL 是开源的，目前隶属于 Oracle 旗下产品。
• MySQL 支持大型的数据库。可以处理拥有上千万条记录的大型数据库。
• MySQL 使用标准的 SQL 数据语言形式。
• MySQL 可以运行于多个系统上，并且支持多种语言。这些编程语言包括 C、C++、
Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。
• MySQL 支持大型数据库，支持 5000 万条记录的数据仓库，32 位系统表文件最大
— 15 —

西安石油大学大学本科毕业设计（论文）

可支持 4GB，64 位系统支持最大的表文件为 8TB。
• MySQL 是可以定制的，采用了 GPL 协议，可以修改源码来开发自己的 MySQL 系
统。

3.3

Python 开发语言 Flask 模块

Flask 一直被称为是 Python 中轻量级的可定制的框架，其核心简单，相比其他框架
更加灵活轻便，也更容易掌握。
你能 Flask 框架核心简单，同时在使用过程同样可以保持功能的丰富与扩展性，用
户在使用 Flask 开发网站时，可以根据自己的需求添加不同的功能，各种强大的插件库
可以让用户完全按照自己的意愿开发出功能强大的为国内站。
代码 3-1：Flask 简单示例
1
2
3
4
5

from flask import Flask
app = Flask ( __name__ )
@app. route ('/')
def index ():
return 'Hello World '

仅仅 5 行代码，就可以在浏览器中显示一个 Hello World 响应。所以 Flask 的其中一
个优势再明显不过了：简洁。且不说 Java 的 Web 框架 Spring，就说同样使用 Python 的
框架 Django，写一个 Hello World 程序也得 10 行代码。
第一行，导入包。
第二行，创建对象。
第三行，创建路由。
第四行、第五行，视图函数。

3.4

SQLAlchemy—对象关系映射器 (ORM)

SQLAlchemy 是一个功能非常强大的库，用于在 Python 中处理关系数据库。代替手
工编写 SQL 查询，我们可以使用普通的 Python 对象来表示数据库表并执行查询。这种
方法有很多好处，如下代码所示：
DHT11 数据表对象数据表模型
1
2
3
4
5
6

7

class Dht11 ( PaginatedAPIMxin , db. Model):
__tablename__ = 'Dht11 '
id = db. Column (db.Integer , primary_key =True) # 卡 片 存 储 收 到 MQTT 数 据 的 序 号
temperature = db. Column (db. String (48) , index=True) # 存 储 MQTT 数 据 中 温 度
humidity = db. Column (db. String (48) , index=True) # 存 储 MQTT 数 据 中 湿 度
timestamp = db. Column (db.DateTime , index=True , default = datetime . utcnow ) # 存 储 当 前 收
到数据的时间戳
card_id = db. Column (db.Integer , db. ForeignKey ('boards .id')) # 对 应 的 卡 片 ID

8
9
10

def __repr__ (self):
# __repr__ 方 法 ， 它 用 于 生 成 Dht11 类 实 例 的 辅 助 显 示 内 容
return '<temp :{0} , humidity :{1} '. format (self. temperature , self. humidity )

11
12

def to_dict (self):

#单 个 对 象 方 法

— 16 —

开发技术选择

data = {
'id_from_db ': self.id ,
'owner_email ': str(User. query. get_or_404 (self. card_id ).email),
'from_card_id ': self.card_id ,
'value_created_at ': self.timestamp ,
'temperature ': self. temperature ,
'humidity ': self.humidity ,
'_links ': {
(self. card_id ).id) # user_id
}
}
return data

13
14
15
16
17
18
19
20
21
22
23
24

通过 ORM 方法的使用很容易的构建了返回对象的数据格式
与手工编写 SQL 查询相反，我们可以使用普通的 Python 对象来表示数据库表，并
执行查询。如下，该方法有很多的优点：
应用程序可以完全用 Python 开发。
数据库引擎之间的细微差别被抽象掉了。这使可以像处理轻量级数据库一样进行操
作，例如，使用 SQLite 进行本地开发和测试，然后切换到专为生产中的高负载而设计
的数据库（例如 PostgreSQL）。
数据库错误不太常见，
因为您的应用程序和数据库服务器之间现在存在两层：
Python
解释器本身（这将捕获明显的语法错误）和 SQLAlchemy，后者具有定义良好的 API 和
自己的错误检查层。
由于 SQLAlchemy 的工作单元模型有助于减少不必要的数据库往返次数，因此数据
库代码可能会变得更加高效。SQLAlchemy 还具有有效地预取相关对象的功能，称为预
先加载。
对象关系映射（Object Relational Mapping，ORM）使代码更具可维护性，这被称为
“不要重复自己”（DRY）。假设将列添加到模型中。使用 SQLAlchemy，只要您使用该
模型，它将可用。另一方面，如果整个应用程序中都散布着手写的 SQL 查询，则需要一
次更新一次每个查询，以确保包含新列。SQLAlchemy 可以帮助避免 SQL 注入漏洞。
出色的库支持：有很多有用的库可以直接与 SQLAlchemy 模型一起使用，以提供诸
如维护接口和 RESTful API 之类的东西。
应用可以完全使用 Python 开发。

3.5

RESTful 架构开发方式

REST 全称是 Representational State Transfer，中文意思是表述（通常译为表现层状
态转移）
。REST 本身并没有创造新的技术、组件或服务，而隐藏在 RESTful 背后的理念
就是使用 Web 的现有特征和能力，更好地使用现有 Web 标准中的一些准则和约束。虽
然 REST 本身受 Web 技术的影响很深，但是理论上 REST 架构风格并不是绑定在 HTTP
上，只不过目前 HTTP 是唯一与 REST 相关的实例。所以我这里描述的 REST 也是通过
HTTP 实现的 REST。
REST 全称是表述性状态转移，那究竟指的是什么的表述? 其实指的就是资源。任
— 17 —

西安石油大学大学本科毕业设计（论文）

何事物，只要有被引用到的必要，它就是一个资源。资源可以是实体 (例如手机号码)，
也可以只是一个抽象概念 (例如价值) 。下面是一些资源的例子：
• 某用户的手机号码
• 某用户的个人信息
要让一个资源可以被识别，
需要有个唯一标识，
在 Web 中这个唯一标识就是 URI(Uniform
Resource Identifier)。
URI 既可以看成是资源的地址，也可以看成是资源的名称。如果某些信息没有使
用 URI 来表示，那它就不能算是一个资源，只能算是资源的一些信息而已。URI 的设
计应该遵循可寻址性原则，具有自描述性，需要在形式上给人以直觉上的关联。这里以
github 网站为例，给出一些还算不错的 URI：
• https://github.com/git/git
• https://github.com/git/git/blob/master/block-sha1/sha1.h
• https://github.com/git/git/commit/e3af72cdafab5993d18fae056f87e1d675913d08
• https://github.com/git/git/pulls
• https://github.com/git/git/pulls?state=closed
1. REST 描述的是在网络中 client 和 server 的一种交互形式；REST 本身不实用，实
用的是如何设计 RESTful API（REST 风格的网络接口）；2. Server 提供的 RESTful API
中，URL 中只使用名词来指定资源，原则上不使用动词。“资源”是 REST 架构或者说
整个网络处理的核心。比如：
• http://api.qc.com/v1/newsfeed: 获取新闻;
• http://api.qc.com/v1/friends: 获取某人的好友列表;
• http://api.qc.com/v1/profile: 获取某人的详细信息;
3. 用 HTTP 协议里的动词来实现资源的添加，修改，删除等操作。即通过 HTTP 动
词来实现资源的状态扭转：GET 用来获取资源，POST 用来新建资源（也可以用于更新
资源），PUT 用来更新资源，DELETE 用来删除资源。比如：
• DELETE http://api.qc.com/v1/friends: 删除某人的好友（在 http parameter 指定好友
id）
• GET http://api.qc.com/v1/friends: 请求好友资料
• POST http://api.qc.com/v1/friends: 添加好友
— 18 —

开发技术选择

• UPDATE http://api.qc.com/v1/profile: 更新个人资料
如下图3-2例：

图 3-2: RESTful 设计理念图

通过使用 RESTful 可以做到：前后端分离，减少流量。安全问题集中在接口上，由
于接受 json 格式，防止了注入型等安全问题。前端无关化，后端只负责数据处理，前端
表现方式可以是任何前端语言（android，ios,html5）。前端和后端人员更加专注于各自
开发，只需接口文档便可完成前后端交互，无需过多相互了解。服务器性能优化：由于
前端是静态页面，通过 nginx 便可获取，服务器主要压力放在了接口上。

— 19 —

西安石油大学大学本科毕业设计（论文）

4
4.1

系统开发与实现

结构化开发方式

结构化方法是一种传统的软件开发方法，它是由结构化分析、结构化设计和结构化
程序设计三部分有机组合而成的。结构化设计方法是以自顶向下，逐步求精，模块化为
基点，以模块化，抽象，逐层分解求精，信息隐蔽化局部化和保持模块独立为准则的设
计软件的数据架构和模块架构的方法学。它的要点是是把一个复杂问题的求解过程分阶
段进行，而且这种分解是自顶向下，逐层分解，使得每个阶段处理的问题都控制在容易
理解和处理的范围内。
结构化方法的基本思想主要体现在三个方面。
(1) 自顶向下，逐步求精：把程序看成是一个逐步演化的过程。把一个系统与程序
看成是一层一层的。本次的系统开发中，按照自顶向下方式。基于 Arduino 的分布式温
度控制系统可分为：数据收集，数据传输，数据展示，用户管理等几个子系统，而每个
子系统又划分为接收/发送信息，实施处理，提供返回信息等等部分。
(2) 模块化：即将几个系统分成几个模块，每个模块实现特定的功能，最终整个系统
由这些模块组成。模块跟模块之间通过接口传递信息，模块最重要的特点就是独立性，
模块之间还有上下层的关系，上层模块调用下层模块来实现一些功能。本系统的模块化
图如下图4-1所示

图 4-1: 温度控制系统模块图

(3) 语句结构化：顺序结构、分支结构、循环结构，都是常用的语句结构。
结构化分析方法的实质是着眼于数据流，自顶向下，逐层分解，建立系统的处理流
— 20 —

系统开发与实现

程，以数据流图和数据字典为主要工具，建立系统的逻辑模型。
结构化分析的步骤如下：
(1) 通过对计划任务书的需求分析为背景，确立整个系统的具体模型
(2) 去掉具体模型中非本质因素，抽象出当前系统的逻辑模型
(3) 根据计算机的特点分析当前系统与目标系统的差别，建立目标系统的逻辑模型
(4) 完善目标系统并补充细节，写出目标系统的软件需求规格说明
(5) 测试直到确认满足计划任务书对软件的需求
结构化设计方法给出一组帮助设计人员在模块层次上区分设计质量的原理与技术。
它通常与结构化分析方法衔接起来使用，以数据流图为基础得到软件的模块结构。SD
方法尤其适用于变换型结构和事务型结构的目标系统。在设计过程中，它从整个程序的
结构出发，利用模块结构图表述程序模块之间的关系。

4.2

红外编码

红外通信是利用近红外波段的红外线作为传递信息的媒体，即通信信道。发送端将
基带二进制信号调制为一系列的脉冲串信号，通过红外发射管发射红外信号。接收端将
接收到的光脉转换成电信号，再经过放大、滤波等处理后送给解调电路进行解调，还原
为二进制数字信号后输出。常用的有通过脉冲宽度来实现信号调制的脉宽调制（PWM）
和通过脉冲串之间的时间间隔来实现信号调制的脉时调制（PPM）两种方法。简而言之，
红外通信的实质就是对二进制数字信号进行调制与解调，以便利用红外信道进行传输；
红外通信接口就是针对红外信道的调制解调器。二进制数字信号如何进行调制与解调，
利用何种红外信道进行传输，这就被称为红外协议。因为在后续空调解码器的设计中需
要甄别不同的协议，所以下文将详细介绍几种常见的红外通信协议：
1. NEC 协议的基本特征：8 位地址位，8 位命令位。为了可靠性地址位和命令位被
传输两次。脉冲位置调制。载波频率 38kHz。每一位的时间为 1.125ms 或 2.25ms。
逻辑 0 和 1 的定义：
• 逻辑 1 的是由 560µs 的高电平和 1.69ms 的低电平组成的脉冲表示。
• 逻辑 0 的是由 560µs 的高电平和 565µs 的低电平组成的脉冲表示。

图 4-2: NEC 的 0，1 码

重复码的格式是由 9ms 的高电平和 2.25ms 的低电平及一个 560µs 的高电平组成
— 21 —

西安石油大学大学本科毕业设计（论文）

发送格式如下：NEC 协议中，首先是 9ms 的高电平脉冲，其后是 4.5ms 的低电平，
接下来就是 8bit 的地址码（从低有效位开始发），而后是 8bit 的地址码的反码（主要是
用于校验是否出错）
。然后是 8bit 的命令码（也是从低有效位开始发）
，而后也是 8bit 的
命令码的反码。

图 4-3: NEC 编码

2. RC5 协议 RC5 协议由 Philips 公司推出。它采用载波频率固定为 36kHz 的 ASK
调制和曼彻斯特编码。基本特征：（1）4 位地址位，4 位命令位。（2）地址位和命令位
被传输一次。（3）载波频率 36kHz。（4）每一位的时间为 1.05ms 或 2.1ms。
逻辑 0 和 1 的定义如：逻辑 1 的是由 889µs 的低电平和 889µs 的高电平组成的脉冲
表示。逻辑 0 的是由 889µs 的高电平和 889µs 的低电平组成的脉冲表示。

图 4-4: RC5 的 0，1 编码

发送格式如下：RC5 协议中，首先是“110”的信号，接下来就是 5bit 的地址码。然
后是 7bit 的命令码。

图 4-5: RC5 编码
— 22 —

系统开发与实现

为了提高红外编码的识别效率，需要引用一个 IRremote 库函数。在编写基于红线
传感器收发通信的 Arduino 应用程序时，这个开源库函数可极大地减少我们的编码工作
量和程序代码量。库函数硬件上支持多种 Arduino 主控板，软件上支持多种红外遥控编
码的发送和接收协议，而且便于扩展和用户自定义。
本次系统开发过程中，针对通用空调红外遥控器，编写了以下 Arduino 的红外解码
程序用于控制空调温度：
代码 4-1: Arduino 的红外解码程序
1

# include <Arduino .h>

2
3

/*

4

* Define macros for input and output pin etc.
*/
# include " PinDefinitionsAndMore .h"

5
6
7
8

/*

9

* You can change this value accordingly to the receiver module you use.
* The required value can be derived from the timings printed here.
* Keep in mind that the timings may change with the distance
* between sender and receiver as well as with the ambient light intensity .
*/
# define MARK_EXCESS_MICROS
20 // recommended for the cheap VS1838 modules

10
11
12
13
14
15
16

17

//# define RECORD_GAP_MICROS 12000 // Activate it for some LG air conditioner
protocols
# include <IRremote .h>

18
19
20
21
22
23

// +=============================================================================
// Configure the Arduino
//
void setup () {
pinMode ( LED_BUILTIN , OUTPUT );

24
25
26

27

28
29
30

Serial . begin (9600) ;
// Status message will be sent to PC at 9600 baud
#if defined ( __AVR_ATmega32U4__ ) || defined ( SERIAL_USB ) || defined (
SERIAL_PORT_USBVIRTUAL ) || defined ( ARDUINO_attiny3217 )
delay (4000) ; // To be able to connect Serial monitor after reset or power up
and before first print out. Do not wait for an attached Serial Monitor !
# endif
// Just to know which program is running on my Arduino
Serial . println (F(" START " __FILE__ " from " __DATE__ "\r\ nUsing library version
" VERSION_IRREMOTE ));

31

IrReceiver . begin ( IR_RECEIVE_PIN , ENABLE_LED_FEEDBACK ); // Start the receiver ,
enable feedback LED , take LED feedback pin from the internal boards
definition

32

33

Serial . print (F(" Ready to receive IR signals at pin "));
Serial . println ( IR_RECEIVE_PIN );

34
35
36

}

37
38
39
40

// +=============================================================================
// The repeating section of the code
//

— 23 —

西安石油大学大学本科毕业设计（论文）

41
42
43
44
45

46
47

48
49
50
51

52

53
54

55

56

57
58

59

60
61

62

void loop () {
if ( IrReceiver . decode ()) { // Grab an IR code
// Check if the buffer overflowed
if ( IrReceiver . decodedIRData .flags & IRDATA_FLAGS_WAS_OVERFLOW ) {
Serial . println ("IR code too long. Edit IRremoteInt .h and increase
RAW_BUFFER_LENGTH ");
} else {
Serial . println ();
// 2 blank lines
between entries
Serial . println ();
IrReceiver . printIRResultShort (& Serial );
Serial . println ();
Serial . println (F("Raw result in internal ticks (50 us) - with leading
gap"));
IrReceiver . printIRResultRawFormatted (& Serial , false); // Output the
results in RAW format
Serial . println (F("Raw result in microseconds - with leading gap"));
IrReceiver . printIRResultRawFormatted (& Serial , true); // Output the
results in RAW format
Serial . println ();
// blank line between
entries
Serial . print (F(" Result as internal ticks (50 us) array - compensated
with MARK_EXCESS_MICROS ="));
Serial . println ( MARK_EXCESS_MICROS );
IrReceiver . compensateAndPrintIRResultAsCArray (& Serial , false); //
Output the results as uint8_t source code array of ticks
Serial . print (F(" Result as microseconds array - compensated with
MARK_EXCESS_MICROS ="));
Serial . println ( MARK_EXCESS_MICROS );
IrReceiver . compensateAndPrintIRResultAsCArray (& Serial , true); // Output
the results as uint16_t source code array of micros
IrReceiver . printIRResultAsCVariables (& Serial ); // Output address and
data as source code variables

63

IrReceiver . compensateAndPrintIRResultAsPronto (& Serial );

64
65

//

}
}
IrReceiver . resume ();
value

66
67

}

68
69

// Prepare for the next

}

4.3

对开源项目的有效利用

开放源代码软件（OSS）是一种计算机软件，其源代码提供许可证，版权持有者有
权为任何目的研究，更改和分发软件给任何人。开源软件可能会以公开的协作方式开
发。根据研究它的科学家，开源软件是开放式协作的一个突出例子。
对于开发者而言，了解并使用目前在社区中比较流行的开源项目是很必要的一件
事。利用这些项目，项目开发工作有时能达到事半功倍的效果。尤其是在互联网这个飞
速发展的领域，快速开发、快速上线就是生命，引入开源项目可以节省很多的人力和时
间，降低开发成本。Standish Group 2008 年的一份报告指出，采用开源软件模式每年可
为消费者节省约 600 亿美元（480 亿英镑）的费用。但采用开源软件的决定不应仅仅以
— 24 —

系统开发与实现

低成本为基础。在切换到开源以充分利用它之前，需要对需求进行详细的分析和理解。
包管理器是现在 web 开发必须使用的工具，因为网站系统的开发有必要借助数以
万计的众多开源爱好者们的力量。本系统由以下包管理系统提供支持：Python 的包安
装程序 pip,Ubuntu Linux 发行版的包管理器 APT。pip 是 Python 官方推荐的包管理工具:
属于 python 的一部分。pip 也支持直接从文件读取包列表以便批量安装，通常命名为
requirements.txt。下面列出了本系统全部所用的 python 模块。通过 requirements.txt 可以
方便有效的做出系统的迁移部署。APT 可以方便快捷的部署各种类型服务，如本系统中
采用的 MQTT 服务器，WEB 服务器等。都可以直接通过
1

apt install mosquitto nginx

一句命令直接安装，免去了 windows 系统下，寻找，下载，安装的方式，节省了大量的
时间。
温控系统所选用的全部 Python 模块以及版本列表
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34

alembic ==1.0.10
aniso8601 ==7.0.0
Click ==7.0
Flask ==1.0.3
Flask - Admin ==1.5.3
Flask - Login ==0.4.1
Flask - Migrate ==2.5.2
Flask -MQTT ==1.0.5
Flask - RESTful ==0.3.7
Flask - Restless ==0.17.0
Flask - SocketIO ==4.2.0
Flask - SQLAlchemy ==2.4.0
Flask -WTF ==0.14.2
itsdangerous ==1.1.0
Jinja2 ==2.10.1
Mako ==1.0.12
MarkupSafe ==1.1.1
mimerender ==0.6.0
paho -mqtt ==1.4.0
python - dateutil ==2.8.0
dj -database -url ==0.5.0
python - editor ==1.0.4
python - engineio ==3.9.0
python - mimeparse ==1.6.0
python - socketio ==4.3.0
pytz ==2019.2
six ==1.12.0
SQLAlchemy ==1.3.4
typing ==3.7.4
Werkzeug ==0.15.4
WTForms ==2.2.1
gunicorn ==20.1.0
mysqlclient ==1.4.2. post1
requests ==2.22.0

上表列出了温控系统所选用的全部 Python 模块以及版本列表，可以看到数目相当
多，而正是利用了这些方便的开源项目，才使得快速开发一个稳定、强大的温控系统成
— 25 —

西安石油大学大学本科毕业设计（论文）

为可能。
需要注意的是，开源许可软件大多免费提供，但这不一定是这种情况。某些仅允许
非商业性质的再分发，或修改源代码仅供个人使用的软件并不属于开源。开放源代码可
能有一些限制，特别是关于表达对软件起源的限制，例如要求在代码中保留作者姓名和
版权声明，或者要求重新分发许可软件仅在相同的许可证下发布。
本次系统的开发遵循了开源许可协议，其诞生离不开众多开源项目的支持，在此对
这些开源项目作者所做出的工作表示感谢。

— 26 —

系统开发成果

系统开发成果

5

对基于 Arduino 的分布式温度控制系统已完成基本设计与开发，通过测试并于 2021
年 5 月运行在西安石油大学校内，校内网网址：http://arduino.deconf.xyz/。将在机房自动
化，校园环境智能化方面推进智能化校园建设。

5.1

预期目标

整体来说，本次系统设计和开发基本达成预期目标。
1. 提供了 WEB 页面可视化的管理和配置功能。可配置用户信息，节点信息等。
2. 关键信息的统计展示功能。完成了节点的温度、湿度、烟雾等信息的展示功能
3. 温度控制功能方面，通过 Arduino 传感器采集到的温度，在设定的阈值的控制下，
通过红外发射模块，控制空调的温度。
3. 告警方面，在烟雾的值超过阈值之后，可以根据用户信息的电子邮箱发送对应的
的告警信息。

5.2

分布式节点管理控制系统

依照前面的需求分析，系统设计等工作，确立了本系统采用 C/S 模型，来进行对各
个节点的数据管控。按照前图4-1所示，进行 S 端的开发成果如下：
5.2.1

用户模块

按照模块化设计思想，实现用户模块如下所示。WEB 端具有用户登录，用户注册，
用户管理等功能。用户登录具有用户鉴权，用户密码鉴别的能力，确保正确用户登录。
用户注册可以使该系统支持多用户，且每个用户拥有属于自己的个人信息，以及关联的
卡片信息等。用户管理方便管理员对多用户的修改，增加，删除等。用户的信息写入在
后端存储的 MySQL 数据库中。在前端显示上做到了简洁大方以及美观。

图 5-1: 用户登录页面
— 27 —

西安石油大学大学本科毕业设计（论文）

图 5-2: 用户注册页面

图 5-3: 用户管理页面

5.2.2

信息展示模块

信息展示可以图形的方式直观的展示出节点的直观信息。方便直观的查看节点的环
境参数，如当前的温度，湿度，烟雾等关键的环境信息，便于运维人员对于机房环境的
监测。

图 5-4: 节点信息展示
— 28 —

系统开发成果

图 5-5: 温度显示模块

图 5-6: 湿度显示模块

图 5-7: 烟雾显示模块

5.2.3

节点管理模块

通过这里可以方便快捷的对整个节点进行创建，删除。以及节点接受到数据的次数
统计。通过次数统计可以对于客户端的传感器有鉴别，防止传感器因接线不良，传感器
损坏导致的数据无法传输的问题。以及直观看到节点的 API 扩展信息。预留了数据整合
的基础。
— 29 —

西安石油大学大学本科毕业设计（论文）

图 5-8: 用户节点管理模块

图 5-9: 管理员节点管理模块

5.3

Arduino 客户端

Arduino 客户端主要负责节点环境信息采集，以及根据环境信息，控制空调。在各
个传感器模块组装以及程序写入之后完成客户端的各项能力。通过 DHT11 温湿度传感
器实现了环境温度、湿度信息采集，MQ2 烟雾传感器模块实现了环境烟雾监测，并通
过扩展的 W5100 以太网扩展模块向服务器传输节点的各项信息，如：温度，湿度，烟
雾等环境信息。红外接收模块可以进行空调遥控器红外编码的解析，之后将解析后的数
据保存在开发板内，可以通过开发板的红外发射模块，依照环境条件的阈值，进行相应
的温湿度控制。
Arduino 客户端的高扩展性和以及高开放性的特性在本次系统的起到了关键性作
用。高扩展体现在 Arduoino 支持的多传感器设备，高开放性体现在代码中有各类对开
源代码的复用。其设备的便捷性和可开发等特性带来了灵活便捷的组装或改装方式。例
如，针对与 WIFI 联网环境可以替换 W5100 以太网模块为 ESP8266 模块即可完成 WIFI
下网络数据传输。在这些特性的支持下，Arduino 的客户端具有了便捷的数据采集，传
输方式。

— 30 —

系统开发成果

图 5-10: Arduino 客户端展示图

5.4

遇到的问题和解决办法

1. Arduino 程序中断。具体表现为：只有串口连接后，程序才继续执行。
解决办法：
阅读官方文档可知从 Arduino IDE 1.0 开始，串行传输是异步的。如果发送缓冲区
中有足够的空白空间，Serial.write() 则将在串行传输任何字符之前返回。如果发送缓
冲区已满，Serial.write() 则将阻塞直到缓冲区中有足够的空间。因此，为避免阻塞调用
Serial.write()，需要注释掉程序中调试部分 Serial.print() 函数，防止引起 IO 阻塞。
2. Arduino 开发板容量有限，无法存储空调设备的全部编码信息。
解决办法：
目前临时采用减少空调编码使用，减少空调的控制预设。在后期的优化中设想空调
全部编码信息全部存储在服务器数据库中，之后通过 MQTT 协议进行下发，在通过数
据拼接形成完整编码。
3. 红外发射后无反馈机制导致无法判定红外发射后空调是否相应以及生效。
解决办法：
通过增加声音感应模块确认空调接受的提示音。从而判断是否接受到 Arduino 红外
控制信号。

— 31 —

西安石油大学大学本科毕业设计（论文）

6

系统测试

系统测试是将需测试的软件，作为整个基于计算机系统的一个元素，与计算机硬件、
外设、某些支持软件、数据和人员等其他系统元素及环境结合在一起测试。在实际运行
（使用）环境下，对计算机系统进行一系列的组装测试和确认测试。系统测试的目的在
于通过与系统的需求定义作比较，发现软件与系统定义不符合或与之矛盾的地方。

6.1

测试目标

1. 查看系统中是否有逻辑错误以及逻辑冲突。发现系统中存在的问题，完善系统的
设计逻辑。确保系统逻辑的稳定性，避免系统死锁等情况。
2. 确立各个子模块以及主模块之间的状况。保证集成之后系统各模块之间的良好配
合。
3. 优化系统设计，找出系统缺陷，保证系统更加符合软件工程，可以得到良好的再
维护可能。
4.

6.2

测试方案

6.3

强度测试
表 6-1: 测试环境配置

核心硬件 型号
CPU
RAM
HDD

Intel Core i7 9xx (Nehalem Core i7, IBRS update) @ 6x 2.267GHz
DDR3 1600MHz 4Gb
40G

核心软件 版本
OS
Python
Flask
mosquitto

Ubuntu 18.04.5 LTS
v3.6.9
v1.0.3
v1.4.15

— 32 —

系统测试

结论与总结
依照基于 Arduino 的分布式温控系统的计划任务书的需求，首先进行系统的需求分
析，之后进行整体设计，确定了 Arduino 客户端的程序流程和基于 WEB 温控系统的程序
流程。论证了各项前沿的开发技术和开发方式，确定了整体项目框架以及数据库设计。
采用了 Arduino 作为各节点信息采集的设备。其低廉的成本节省了大量的经费。Python
的 Flask 作为开发 WEB 应用程序的框架，数据库采用了高效的 MySQL。以及 Linux 作
为操作系统。共同构成了完整的基于 Arduino 的分布式温度控制系统。
本系统基本完成了预期的目标：具有自动化的温度控制模块、远程可视化的环境温
度、湿度、烟雾的监控模块，以及烟雾报警模块。基本满足了校园中通信机房智能化控
制空调的能力。
本次系统开发离不开前期周密的技术调研，以及大量开源项目的使用。
本次系统设计开发中，通过学习大量前沿项目经验，如 ORM 的数据库操控方式，
RESTful 的 web 架构，深入了解了最新的开发思想，开拓了编程思路。如 ORM 使得不
必去书写复杂冗长的 SQL 命令语句，通过 SQL 的对象实例化，以编程的思路去控制数
据库，这样减少不必要的数据库往返次数，增加了代码的一致性，提高了代码的复用性，
使得编程效率有了很大的提高。

— 33 —

西安石油大学大学本科毕业设计（论文）

参考文献
[1] 邹燕. IDC 机房温度调控设计研究 [D]. [S.l.] : 上海工程技术大学, 2016.
[2] 钟珞, 袁景凌, 魏志华, et al. 软件工程 [M]. 2005.
[3] TIP F, TIP F. Static analysis of event-driven Node.js JavaScript applications[C] // ANON. ACM Sigplan
International Conference on Object-Oriented Programming, Systems, Languages, and Applications.
2015 : 505 – 519.
[4] 储久良. Web 前端开发技术:HTML、CSS、JavaScript[M]. [S.l.] : 清华大学出版社, 2016.
[5] DEBERGALIS M. Meteor - Web Development Like You Never Seen[J], .
[6] INC M. The MongoDB 3.2 Manual[J], 2016.
[7] REFERENCE Q, ANDERSON J, ADAMS E, et al. MongoDB Applied Design Patterns[J], 2013.
[8] INC F. React–A JavaScript library for building user interfaces[J], 2015.
[9] STAFF C. React: Facebook’s functional turn on writing Javascript[M]. [S.l.] : ACM, 2016 : 56 – 62.
[10] JANE E, WESTBY H. Git for Teams: A User-Centered Approach to Creating Efficient Workflows in
Git[M]. [S.l.] : O’Reilly Media, Inc., 2015.
[11] 王 金 龙, 宋 斌, 丁 锐. Node.js: 一 种 新 的 Web 应 用 构 建 技 术 [J]. 现 代 电 子 技 术, 2015,
v.38;No.437(6) : 70 – 73.
[12] LIU G, SIU J, DAWSON M, et al. Introduction to debugging and monitoring Node.js[C] // ANON.
International Conference on Computer Science and Software Engineering. 2015 : 291 – 291.
[13] BRUMBULLI M, TOPçIU B, DALAçI A. SMIS: A Web-Based School Management Information System[J], 2008.
[14] 黄贤立. NoSQL 非关系型数据库的发展及应用初探 [J]. 福建电脑, 2010, 26(7) : 30 – 30.

— 34 —

西安石油大学大学本科毕业设计（论文）

致谢
本次论文是在我的导师郑洪涛郑老师的悉心指导和亲切关心下完成的。他细心、认
真地指导学生，提供了大量的设备支持以及理论探讨。从论文课题的筛选到最终项目的
完成与上线投入运行，郑老师始终都给予了我细心指导和不懈支持。在此我向郑老师致
以诚挚的谢意以及崇高的敬意。
另外，我还要感谢我的室友们解决问题的想法，以便我找到项目开发的最初方向。
当然，他们也在业余时间，和我讨论关于算法的一些想法，让我受益匪浅。在这里，我
说谢谢，希望这种友谊永远伴随着我。
在我上学十多年的过程中，离不开父母的鼓励和支持，是他们的辛勤工作、无私的
付出，为我创造了良好的学习条件，让我可以完成学业，感激他们一直在养育我。
也许毕业设计是我在大学的最后一项作业。真的想借此机会给最近四年来帮助过我
的所有老师、同学和朋友说声谢谢，你们的友谊将成为我一生最大的财富，是我人生不
可分割的一部分。
在整个系统设计过程中，存在着许多障碍和挫折，但是当整个系统完全展现在自己
面前时，这种喜悦溢于言表。近几个月忙于毕业设计，紧张而有条不紊，让我有机会对
这个专业的基础理论、专业知识和基础技术有更深入的了解和体会，使我在大学里学到
的知识体系升华。
这篇论文的撰写经验会让我牢记，并让我觉得我可以从头到尾地做一件事。它也教
会了我细心做一件事的重要性。我希望这一经历能激励我继续在未来取得更多进步。

